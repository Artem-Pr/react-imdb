{"version":3,"sources":["components/Header/Header.module.css","components/Output/Output.module.css","logo.svg","components/Description/Details.module.css","components/Output/Output.js","api/api.js","redux/output-reducer.js","components/Output/OutputContainer.js","redux/search-reducer.js","components/Header/Header.js","components/Header/HeaderContainer.js","components/Description/Details.js","redux/details-reducer.js","components/Description/DetailsContainer.js","App.js","serviceWorker.js","redux/redux-store.js","index.js"],"names":["module","exports","Output","props","pages","curPage","lastPage","pagesArray","push","getPagesArray","currentPage","totalPages","className","s","movies","Pagination","aria-label","page","PaginationItem","PaginationLink","first","onClick","onPageChanged","getFirstPageArrow","map","p","key","active","last","getLastPageArrow","item","i","id","pageSize","to","name","title","release_date","first_air_date","totalMoviesCount","tmdbAPI","instance","axios","baseURL","moviesAPI","lang","movieName","get","params","api_key","language","query","include_adult","movieId","initialState","firstPageName","lastPageName","setMovies","type","getMovies","searchText","dispatch","then","response","console","log","data","results","total_results","total_pages","outputReducer","state","action","OutputContainer","pageNumber","this","React","Component","connect","outputPage","searchHeader","media_type","searchReducer","Header","header","Container","Row","Col","xs","src","logo","alt","value","onChange","e","onSearchChanged","placeholder","Button","color","onSearchClick","HeaderContainer","updateSearchText","target","Details","genres","vote_average","vote_count","posterUrl","href","homepage","budget","overview","movieDetails","posterBaseUrl","detailsReducer","DetailsContainer","getDetails","match","WithUrlDateDetailsContainer","withRouter","detailsPage","poster_path","App","exact","path","render","Boolean","window","location","hostname","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc8eda90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"logo\":\"Header_logo__3_SJs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Output\":\"Output_Output__2OFhf\",\"pageNumber\":\"Output_pageNumber__13MoP\",\"selectedPage\":\"Output_selectedPage__8OAOe\"};","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Details\":\"Details_Details__1cgig\"};","import React from 'react';\nimport s from './Output.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {Pagination, PaginationItem, PaginationLink} from \"reactstrap\";\n\nlet Output = (props) => {\n    let getPagesArray = (curPage, lastPage) => {\n        let pagesArray = [];\n        if (curPage > 2 && curPage === lastPage) pagesArray.push(curPage - 2);\n        if (curPage > 1) pagesArray.push(curPage - 1);\n        pagesArray.push(curPage);\n        if (curPage < lastPage) pagesArray.push(curPage + 1);\n        if (lastPage > 2 && curPage === 1) pagesArray.push(curPage + 2);\n        return pagesArray;\n    };\n    let pages = getPagesArray(props.currentPage, props.totalPages);\n\n    let getFirstPageArrow = (page) => {\n        if (props.currentPage > 1) {\n            return <PaginationItem>\n                <PaginationLink first onClick={() => props.onPageChanged(1)}/>\n            </PaginationItem>\n        }\n    };\n    let getLastPageArrow = (page) => {\n        if (props.currentPage + 1 < props.totalPages) {\n            return <PaginationItem>\n                <PaginationLink last onClick={() => props.onPageChanged(props.totalPages)}/>\n            </PaginationItem>\n        }\n    };\n\n    return (\n        <section className={s.Output}>\n            {props.movies === null\n                ? <div>searching results</div>\n                : <div>\n                    <Pagination className=\"d-flex justify-content-center\" aria-label=\"Page navigation example\">\n                        {getFirstPageArrow(1)}\n                        {pages.map(p => <PaginationItem key={p} active={p === props.currentPage}>\n                            <PaginationLink onClick={() => props.onPageChanged(p)}>\n                                {p}\n                            </PaginationLink>\n                        </PaginationItem>)}\n                        {getLastPageArrow(props.totalPages)}\n                    </Pagination>\n\n\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Number</th>\n                            {/*<th>Media Type</th>*/}\n                            <th>Name</th>\n                            <th>Release</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {props.movies.map((item, i) =>\n                            <tr key={item.id}>\n                                <td>{props.pageSize * (props.currentPage - 1) + i + 1}</td>\n                                {/*<td>{item.media_type}</td>*/}\n                                <td>\n                                    <NavLink to={`/details/${item.id}`}>\n                                        {item.name || item.title}\n                                    </NavLink>\n                                </td>\n                                <td>{item.release_date || item.first_air_date}</td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </table>\n                    <div>Total count: {props.totalMoviesCount}</div>\n                </div>\n            }\n        </section>\n    );\n};\n\nexport default Output;\n","import * as axios from \"axios\";\n\nconst tmdbAPI = '619e6b54477dcd363899f6f2d3dc1ed1';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3'\n});\n\nexport const moviesAPI = {\n    getMovies(lang, movieName, page) {\n        return instance.get('/search/movie', {\n            params: {\n                api_key: tmdbAPI,\n                language: lang,\n                query: movieName,\n                page: page,\n                include_adult: false\n            }\n        })\n    },\n\n    getDetails(lang, movieId) {\n        return instance.get(`/movie/${movieId}`, {\n            params: {\n                api_key: tmdbAPI,\n                language: lang\n            }\n        })\n    }\n};","import {moviesAPI} from \"../api/api\";\n\nconst SET_MOVIES = 'SET_MOVIES';\nconst SET_TOTAL_MOVIES_COUNT = 'SET_TOTAL_MOVIES_COUNT';\nconst SET_TOTAL_PAGES = 'SET_TOTAL_PAGES';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\n\nlet initialState = {\n    movies: null,\n    totalMoviesCount: null,\n    totalPages: null,\n    currentPage: 1,\n    pageSize: 20,\n    firstPageName: 'First page',\n    lastPageName: 'Last page'\n};\n\nconst outputReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_MOVIES:\n            return {\n                ...state,\n                movies: action.movies\n            };\n        case SET_TOTAL_MOVIES_COUNT:\n            return {\n                ...state,\n                totalMoviesCount: action.totalMoviesCount\n            };\n        case SET_TOTAL_PAGES:\n            return {\n                ...state,\n                totalPages: action.totalPages\n            };\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setMovies = (movies) => ({type: SET_MOVIES, movies});\nexport const setTotalMoviesCount = (totalMoviesCount) => ({type: SET_TOTAL_MOVIES_COUNT, totalMoviesCount});\nexport const setTotalPages = (totalPages) => ({type: SET_TOTAL_PAGES, totalPages});\nexport const setCurrent_Page = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\n\nexport const getMovies = (lang, searchText, page) => {\n    return (dispatch) => {\n        moviesAPI.getMovies(lang, searchText, page)\n            .then(response => {\n                console.log(response);\n                dispatch(setMovies(response.data.results));\n                dispatch(setTotalMoviesCount(response.data.total_results));\n                dispatch(setTotalPages(response.data.total_pages));\n                dispatch(setCurrent_Page(response.data.page))\n            });\n    }\n};\n\nexport default outputReducer;","import React from 'react';\nimport Output from \"./Output\";\nimport {connect} from \"react-redux\";\nimport {getMovies} from \"../../redux/output-reducer\";\n\n\nclass OutputContainer extends React.Component {\n\n    onPageChanged = (pageNumber) => {\n        this.props.getMovies(this.props.lang, this.props.searchText, pageNumber);\n    };\n\n    render() {\n        return (\n            <Output movies={this.props.movies}\n                    totalMoviesCount={this.props.totalMoviesCount}\n                    totalPages={this.props.totalPages}\n                    currentPage={this.props.currentPage}\n                    pageSize={this.props.pageSize}\n                    firstPageName={this.props.firstPageName}\n                    lastPageName={this.props.lastPageName}\n                    onPageChanged={this.onPageChanged}/>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        movies: state.outputPage.movies,\n        totalMoviesCount: state.outputPage.totalMoviesCount,\n        totalPages: state.outputPage.totalPages,\n        currentPage: state.outputPage.currentPage,\n        lang: state.searchHeader.lang,\n        searchText: state.searchHeader.searchText,\n        pageSize: state.outputPage.pageSize,\n        firstPageName: state.outputPage.firstPageName,\n        lastPageName: state.outputPage.lastPageName\n    }\n};\n\nexport default connect(mapStateToProps, {getMovies})(OutputContainer);\n","const UPDATE_SEARCH_TEXT = 'UPDATE_SEARCH_TEXT';\n\nlet initialState = {\n    searchText: 'batman',\n    lang: 'en-US',\n    media_type: []\n};\n\nconst searchReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_SEARCH_TEXT:\n            return {\n                ...state,\n                searchText: action.searchText\n            };\n        default:\n            return state;\n    }\n};\n\nexport const updateSearchText = (searchText) => ({type: UPDATE_SEARCH_TEXT, searchText});\n\nexport default searchReducer;","import React from 'react';\nimport logo from '../../logo.svg';\nimport s from './Header.module.css'\nimport {NavLink} from 'react-router-dom';\nimport {Button, Col, Container, Row} from 'reactstrap';\n\nfunction Header(props) {\n    return (\n        <header className={s.header}>\n            <Container>\n                <Row>\n                    <Col xs=\"2\" className=\"d-flex align-items-center\">\n                        <img src={logo} className={s.logo} alt=\"logo\"/>\n                    </Col>\n                    <Col xs=\"8\" className=\"d-flex align-items-center\">\n                        <input type=\"text\" className=\"form-control\"\n                               value={props.searchText}\n                               onChange={(e) => props.onSearchChanged(e)}\n                               placeholder=\"Enter the name...\"/>\n                    </Col>\n                    <Col xs=\"2\" className=\"d-flex align-items-center\">\n                        <NavLink className=\"w-100\" to={'/'}>\n                            <Button className=\"w-100\" color=\"primary\" onClick={() => props.onSearchClick()}>Search</Button>\n                        </NavLink>\n                    </Col>\n                </Row>\n            </Container>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport {updateSearchText} from \"../../redux/search-reducer\";\nimport {connect} from \"react-redux\";\nimport Header from \"./Header\";\nimport {getMovies, setMovies} from \"../../redux/output-reducer\";\n\n\nclass HeaderContainer extends React.Component {\n\n    onSearchChanged = (e) => {\n        this.props.updateSearchText(e.target.value);\n    };\n\n    onSearchClick = () => {\n        this.props.getMovies(this.props.lang, this.props.searchText, 1);\n    };\n\n    render() {\n        return (\n            <Header onSearchChanged={this.onSearchChanged}\n                    onSearchClick={this.onSearchClick}\n                    searchText={this.props.searchText}/>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        searchText: state.searchHeader.searchText,\n        lang: state.searchHeader.lang\n    }\n};\n\nexport default connect(mapStateToProps, {updateSearchText, setMovies, getMovies})(HeaderContainer);\n\n","import React from 'react';\nimport s from './Details.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nlet Details = (props) => {\n    return (\n        <section>\n            <NavLink to={'/'}>\n                <div>Go back</div>\n            </NavLink>\n            <h1 className={s.Details}>{props.title}</h1>\n            <div>Genres: {\n                props.genres ? props.genres.map((item, i) => <span key={i}>{item.name} </span>) : \"\"\n            }</div>\n            <div>Vote average: <span>{props.vote_average}</span></div>\n            <div>Vote count: <span>{props.vote_count}</span></div>\n            <div>Release date: <span>{props.release_date}</span></div>\n            <img src={props.posterUrl} alt={props.title}/>\n            <div>Runtime: <span>{props.vote_count} min</span></div>\n            <div>Homepage: <a href={props.homepage}>{props.homepage}</a></div>\n            <div>Budget: <span>{props.budget} &#36;</span></div>\n            <h3>Overview</h3>\n            <p>{props.overview}</p>\n        </section>\n    );\n};\n\nexport default Details;\n","import {moviesAPI} from \"../api/api\";\n\nconst SET_MOVIE_DETAILS = 'SET_MOVIE_DETAILS';\nconst SET_POSTER_URL = 'SET_POSTER_URL';\n\nlet initialState = {\n    movieDetails: null,\n    posterBaseUrl: 'https://image.tmdb.org/t/p/w300',\n    posterUrl: ''\n};\n\nconst detailsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_MOVIE_DETAILS:\n            return {\n                ...state,\n                movieDetails: action.movieDetails\n            };\n        case SET_POSTER_URL:\n            return {\n                ...state,\n                posterUrl: state.posterBaseUrl + action.posterUrl\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setMovieDetails = (movieDetails) => ({type: SET_MOVIE_DETAILS, movieDetails});\nexport const setPosterUrl = (posterUrl) => ({type: SET_POSTER_URL, posterUrl});\n\nexport const getDetails = (lang, movieId) => {\n    return (dispatch) => {\n        moviesAPI.getDetails(lang, movieId)\n            .then(response => {\n                dispatch(setMovieDetails(response.data));\n                dispatch(setPosterUrl(response.data.poster_path));\n                console.log(response.data);\n            });\n    }\n};\n\nexport default detailsReducer;","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Details from \"./Details\";\nimport {getDetails} from \"../../redux/details-reducer\";\nimport {withRouter} from \"react-router-dom\";\n\n\nclass DetailsContainer extends React.Component {\n\n    componentDidMount() {\n        this.props.getDetails(this.props.lang, this.props.match.params.movieId);\n    }\n\n    render() {\n        return (\n            <Details {...this.props.movieDetails}\n                     posterUrl={this.props.posterUrl}/>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        movieDetails: state.detailsPage.movieDetails,\n        posterUrl: state.detailsPage.posterUrl,\n        lang: state.searchHeader.lang,\n    }\n};\n\nlet WithUrlDateDetailsContainer = withRouter(DetailsContainer);\n\nexport default connect(mapStateToProps, {getDetails})(WithUrlDateDetailsContainer);\n","import React from 'react';\nimport './App.css';\nimport OutputContainer from \"./components/Output/OutputContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport DetailsContainer from \"./components/Description/DetailsContainer\";\nimport {Route} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <HeaderContainer/>\n            <div>\n                <Route exact path=\"/\"\n                       render={() => <OutputContainer/>}/>\n                <Route path=\"/details/:movieId?\"\n                       render={() => <DetailsContainer/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport searchReducer from \"./search-reducer\";\nimport outputReducer from \"./output-reducer\";\nimport detailsReducer from \"./details-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\n\nlet reducers = combineReducers({\n    searchHeader: searchReducer,\n    outputPage: outputReducer,\n    detailsPage: detailsReducer\n});\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nwindow.store = store; // for checking store in console (need to use - store.getState())\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}